import tkinter as tk
import math
import matplotlib.pyplot as plot
import numpy

window = tk.Tk()
sci_mode = False
window.title("Calculator")

entry = tk.Entry(window)
entry.grid(row=0, column=0, columnspan=3, padx=5, pady=5)


def create_button(text, row, column):
    def on_click():
        clicked = entry.get()
        entry.delete(0, tk.END)
        entry.insert(0, clicked + text)
    button = tk.Button(window, text=text, width=5, height=2, command=on_click)
    button.grid(row=row, column=column)


create_button("0", 4, 1)
create_button("1", 3, 0)
create_button("2", 3, 1)
create_button("3", 3, 2)
create_button("4", 2, 0)
create_button("5", 2, 1)
create_button("6", 2, 2)
create_button("7", 1, 0)
create_button("8", 1, 1)
create_button("9", 1, 2)

create_button(".", 4, 0)
create_button("*", 1, 3)
create_button("/", 2, 3)
create_button("+", 3, 3)
create_button("-", 4, 3)


def func_clear():
    entry.delete(0, tk.END)


clear_button = tk.Button(window, text="C", width=5,
                         height=2, command=func_clear)
clear_button.grid(row=0, column=3)


def calculate_result():
    try:
        result = eval(entry.get())
        entry.delete(0, tk.END)
        entry.insert(0, str(result))
    except:
        entry.delete(0, tk.END)
        entry.insert(0, "Error")


equal_button = tk.Button(window, text="=", width=5,
                         height=2, command=calculate_result)
equal_button.grid(row=4, column=2)


# Basit hesap makinesi kodu sonu


def func_backspace():
    current = entry.get()
    entry.delete(0, tk.END)
    entry.insert(0, current[:-1])


backspace_button = tk.Button(
    window, text="←", width=5, height=2, command=func_backspace)
backspace_button.grid(row=0, column=4)


def sci_func():
    global sci_mode
    sci_mode = not sci_mode

    if sci_mode:
        for button in scientific_buttons:
            button.grid()
    else:
        for button in scientific_buttons:
            button.grid_remove()


scientific_buttons = []


sci_button = tk.Button(window, text="SCI", width=5, height=2, command=sci_func)
sci_button.grid(row=1, column=4)


def func_squareroot():
    try:
        value = float(entry.get())
        result = math.sqrt(value)
        entry.delete(0, tk.END)
        entry.insert(0, str(result))
    except:
        entry.delete(0, tk.END)
        entry.insert(0, "Error")


sqrt_button = tk.Button(window, text="√", width=5,
                        height=2, command=func_squareroot)
sqrt_button.grid(row=1, column=5)
sqrt_button.grid_remove()
scientific_buttons.append(sqrt_button)


def func_power():
    value = int(entry.get())
    entry.delete(0, tk.END)
    value2 = int(entry.get())
    result = math.pow(value, value2)
    entry.delete(0, tk.END)
    entry.insert(0, result)


power_button = tk.Button(window, text="x^y", width=5,
                         height=2, command=func_power)
power_button.grid(row=2, column=4)


def func_factorial():
    try:
        value = int(entry.get())
        result = math.factorial(value)
        entry.delete(0, tk.END)
        entry.insert(0, str(result))
    except:
        entry.delete(0, tk.END)
        entry.insert(0, "Error")


factorial_button = tk.Button(
    window, text="x!", width=5, height=2, command=func_factorial)
factorial_button.grid(row=2, column=5)
factorial_button.grid_remove()
scientific_buttons.append(factorial_button)


def func_logarithm():
    try:
        value = float(entry.get())
        entry.insert(0, "log({value})")
        result = math.log10(value)
        entry.delete(0, tk.END)
        entry.insert(0, result)
    except:
        entry.delete(0, tk.END)
        entry.insert(0, "Error")


logarithm_button = tk.Button(
    window, text="log", width=5, height=2, command=func_logarithm)
logarithm_button.grid(row=3, column=5)
logarithm_button.grid_remove()
scientific_buttons.append(logarithm_button)


def func_pi():
    value = entry.get()
    entry.insert(0, math.pi)


pi_button = tk.Button(window, text="π", width=5, height=2, command=func_pi)
pi_button.grid(row=4, column=5)
pi_button.grid_remove()
scientific_buttons.append(pi_button)

# Graph trial


def func_graph():
    import math
    expr = entry.get()
    x = numpy.linspace(-10, 10, 400)
    y = []

    try:
        for val in x:

            y_val = eval(expr, {"x": val, "math": math, "sin": math.sin, "cos": math.cos, "tan": math.tan,
                                "log": math.log, "sqrt": math.sqrt, "pi": math.pi, "e": math.e})
            y.append(y_val)

        plot.plot(x, y)
        plot.title(f"y = {expr}")
        plot.xlabel("x")
        plot.ylabel("y")
        plot.grid(True)
        plot.show()

    except Exception as e:
        entry.delete(0, tk.END)
        entry.insert(0, "Error")


graph_button = tk.Button(window, text="Graph", width=5,
                         height=2, command=func_graph)
graph_button.grid(row=3, column=4)
graph_button.grid_remove()
scientific_buttons.append(graph_button)


window.mainloop()
